<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 开启注解扫描，管理service和dao -->
	<context:component-scan
		base-package="com.itheima.shop.service">
	</context:component-scan>
	<context:component-scan
		base-package="com.itheima.shop.mapper">
	</context:component-scan>


	<!-- 配置文件 -->
	<context:property-placeholder
		location="classpath:*.properties" />

	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 最大活跃连接数 -->
		<property name="maxActive" value="8" />
		<!-- 最小空闲数 -->
		<property name="minIdle" value="3" />
	</bean>


	<!-- 配置sqlsessionFactory -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
<!-- 		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						使用下面的方式配置参数，一行配置一个
						<value>
							默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页。
							offsetAsPageNum=true
							默认值为false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为true时，使用 RowBounds 分页会进行 count 查询。
							rowBoundsWithCount=true
							默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。
							pageSizeZero=true
							分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property> -->
	</bean>

	<!-- 扫描dao接口 -->
	<bean id="mapperScanner"
		class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.itheima.shop.mapper" />
	</bean>


	<!-- 配置Spring的声明式事务管理 -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven
		transaction-manager="transactionManager" />
		
		
    <!--applicationContext.xml 添加-->
<!-- 配置redis -->
	<!-- 连接池配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲数 -->
		<property name="minIdle" value="3"></property>
		<!-- 最大连接数 -->
		<property name="maxTotal" value="8"></property>
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="20000"></property>
	</bean>

	<!-- 配置连接工厂 -->
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="127.0.0.1"></property>
		<property name="port" value="6379"></property>
		<property name="password" value="123456"></property>
		<property name="poolConfig" ref="poolConfig"></property>
	</bean>

	<!-- 配置 key 和 value 的序列化器 -->
	<bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="jdkSerializationRedisSerializer"
		class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>

	<!-- 配置Redis模板对象 -->
	<bean id="redisTemplate"
		class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
		<property name="keySerializer" ref="stringRedisSerializer"></property>
		<property name="valueSerializer"
			ref="jdkSerializationRedisSerializer"></property>
	</bean>

	<bean id="stringRedisTemplate"
		class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
	</bean>
</beans>